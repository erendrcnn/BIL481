/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bil481;

import static spark.Spark.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Logger;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        
        /* 
        Route route = new Route() {
            @Override
            public Object handle(Request request, Response response) throws Exception {
                return "Hello World!";
            }
        };*/
        
        Logger logger = (Logger) LogManager.getLogger(App.class);
        logger.error("HELLO WORLD!");


        get("/", (req, res) -> "Hello World!");

        get("/compute",
            (req, res) -> {
                Map<String, String> map = new HashMap<String, String>();
                map.put("result", "not computed yet.");
                return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine()
        );

        post("/compute",
            (req, res) -> {
                String input1 = req.queryParams("input1");
                String input2 = req.queryParams("input2");

                java.util.Scanner sc1 = new java.util.Scanner(input1);
                sc1.useDelimiter("[;\r\n]+");
                java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
                while (sc1.hasNext())
                {
                    int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
                    inputList.add(value);
                }
                sc1.close();

                System.out.println("\n============[  RUN  ]=============");
                System.out.println("InputList : " + inputList);

                java.util.Scanner sc2 = new java.util.Scanner(input2);
                sc2.useDelimiter("[;\r\n]+");
                java.util.ArrayList<Integer> inputList2 = new java.util.ArrayList<>();
                while (sc2.hasNext())
                {
                    int value = Integer.parseInt(sc2.next().replaceAll("\\s",""));
                    inputList2.add(value);
                }
                sc2.close();

                System.out.println("InputList2 : "  + inputList2);

                int input2asInt = inputList2.get(0);

                boolean result = App.search(inputList, input2asInt);

                System.out.println("Result : " + result);
                System.out.println("============[ FINISH ]============");

                Map<String, Boolean> map = new HashMap<String, Boolean>();
                map.put("result", result);
                return new ModelAndView(map, "compute.mustache");

            }, new MustacheTemplateEngine()
        );
    }

    public static boolean search(ArrayList<Integer> list, int key) {
        if (list == null || list.size() == 0)
            return false;

        for (int i = 0; i < list.size(); i++) {
            if (list.get(i) == key) {
                return true;
            }
        }

        return false;
    }
}
